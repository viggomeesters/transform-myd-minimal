[project]
name = "transform-myd-minimal"
version = "4.1.0"
description = "CLI tool for generating column mapping and YAML files from Excel field definitions for SAP data migration workflows"
authors = [
    {name = "Transform MYD Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["sap", "migration", "field-mapping", "yaml", "excel"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: Office/Business",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "typer>=0.12",
    "pandas>=2.2",
    "openpyxl>=3.1",
    "PyYAML>=6.0",
    "lxml>=5.2",
    "python-dateutil>=2.9",
    "rapidfuzz>=3.9",
    "rich>=13.7",
    "pydantic>=2.0",
    "flask>=3.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.6",
    "black>=24.8",
    "pytest>=8.3",
    "pytest-cov>=5.0",
    "pre-commit>=3.8",
    "mypy>=1.0",
]

[project.scripts]
transform-myd-minimal = "transform_myd_minimal.cli:app"

[project.urls]
Homepage = "https://github.com/viggomeesters/transform-myd-minimal"
Repository = "https://github.com/viggomeesters/transform-myd-minimal"
Issues = "https://github.com/viggomeesters/transform-myd-minimal/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | venv
  | build
  | dist
  | \.eggs
  | \.egg-info
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable recommended rules plus additional checks
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise from within except without explicit exception chain
    "SIM108", # use ternary operator (sometimes less readable)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["N802", "N806"]  # Allow non-lowercase function/variable names in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = false
disallow_untyped_defs = false

# Per-module strict mode (gradually enable strict checking)
[[tool.mypy.overrides]]
module = [
    "transform_myd_minimal.cli",
    "transform_myd_minimal.config_loader",
]
disallow_untyped_defs = false
check_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "integration: Integration tests that may require external resources",
    "unit: Fast unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true